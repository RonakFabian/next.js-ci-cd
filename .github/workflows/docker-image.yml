name: Build and Push NextJs Docker Image

on:
  push:
    branches:
      - main
    paths:
      - "webapp/**"
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ghcr.io/ronakfabian/nextjs-ci-cd

    permissions:
      contents: read
      packages: write

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js for linting and tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Cache Node modules for faster workflows
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ./webapp/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('webapp/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        working-directory: ./webapp

      # Run ESLint
      - name: Lint code
        run: npm run lint
        working-directory: ./webapp

      # Optional: Run tests if you have them (Must be present in package.json)
      # - name: Run tests
      #   run: npm test
      #   working-directory: ./webapp

      # Scan the entire repository for vulnerabilties
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: "nextjs-ci-cd"
          path: "./webapp"
          format: "HTML"

      # Upload dependency check HTML report as artifact
      - name: Upload Dependency Check HTML report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report.html

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        run: docker build -t $REPO_NAME:latest ./webapp

      # Scane Dockert Image using Trivy
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.REPO_NAME }}:latest

      # Build and push Docker image
      - name: Tag and Push Docker image
        run: |
          SHORT_SHA=${GITHUB_SHA::7}  # first 7 characters of commit SHA
          docker tag $REPO_NAME:latest $REPO_NAME:$SHORT_SHA
          docker push $REPO_NAME:latest
          docker push $REPO_NAME:$SHORT_SHA
